using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace SplineMesh {
    /// <summary>
    /// Example of component to show the deformation of the mesh on a changing
    /// interval and changing spline nodes.
    /// 
    /// In this example, as the MeshBender is working on spline space, it will update
    /// the mesh if one of the curve change. Each change make the MeshBender "dirty" and
    /// it will compute the mesh only once on it's next update call.
    /// 
    /// This component is only for demo purpose and is not intended to be used as-is.
    /// </summary>
    [RequireComponent(typeof(Spline))]
    public class ExampleGrowingRoot : MonoBehaviour {
        private GameObject generated;
        private Spline spline;
        private float rate = 0;
        private MeshBender meshBender;

        public Mesh mesh;
        public Material material;
        public Vector3 rotation;
        public Vector3 scale;

        public float startScale = 1;

        public float DurationInSecond;

        [SerializeField]
        private bool _useTangents;

        private void Start() {
            rate = 0;
            Init();
        }

        private void Update() {
            rate += Time.deltaTime / DurationInSecond;
            if (rate > 1) {
                rate --;
            }
            Contort();
        }

        private void Contort() {
            float nodeDistance = 0;
            int i = 0;
            for (var index = 0; index < spline.Nodes.Count; index++) {
                var node = spline.Nodes[index];
                var nodeDistanceRate = nodeDistance / spline.Length;
                var nodeScale = startScale * (rate - nodeDistanceRate);
                node.Scale = new Vector2(nodeScale, nodeScale);
                spline.UpdateNode(index, node);
                if (i < spline.Curves.Count) {
                    nodeDistance += spline.Curves[i++].Length;
                }
            }

            if (generated != null) {
                meshBender.SetInterval(spline, 0, spline.Length * rate);
            }
        }

        private void Init() {
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : UOUtility.Create(generatedName, gameObject,
                typeof(MeshFilter),
                typeof(MeshRenderer),
                typeof(MeshBender));

            generated.GetComponent<MeshRenderer>().material = material;

            meshBender = generated.GetComponent<MeshBender>();
            spline = GetComponent<Spline>();
            meshBender.SetSource(new SourceMesh(mesh, default, Quaternion.Euler(rotation), scale));
            meshBender.SetInterval(spline, 0, 0.01f);
        }
    }
}
